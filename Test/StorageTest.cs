using System;
using System.Linq;
using NUnit.Framework;
using Storage;
using Storage.Configuration;
using Storage.Models;

namespace Test
{
    [TestFixture]
    public class StorageTest
    {
        private readonly IServiceDeskStorage _storage;

        public StorageTest()
        {
            var normalConnString = Configurator.Config["constr"];
            const string ciConnString = "Server=localhost;Port=3306;Uid=ubuntu;Database=2x2CRM;SslMode=None;";
            _storage = new DescStorage(
                Environment.GetEnvironmentVariable("CI") == "true" ? ciConnString : normalConnString
            );
        }

        [Test]
        public void it_should_be_possible_to_get_all_issues()
        {
            var issues = _storage.Issues.ToList();
            Assert.AreEqual(issues.Count, 2);
            Assert.AreEqual(issues.First().Owner.Id, 8);
        }

        [Test]
        public void agent_should_be_possible_to_add_and_delete()
        {
            string agentName = Guid.NewGuid().ToString();
            int count = _storage.Agents.Count();
            var agent = _storage.AddOrUpdateAgent(new AgentModel() {Name = agentName, CompanyId = 1, Login = "NewLogin", Password = "Password", Label = "Label"});
            Assert.AreEqual(_storage.Agents.Count(), count + 1);    // check row count
            Assert.Greater(agent.Id, 2);    // check is id is generated by RDBMS
            Assert.AreEqual(_storage.FindByIdAsync(agent.Id).Id, agent.Id); // check if exists in db
            // deleteting agent
            _storage.DeleteAgent(agent);
            Assert.AreEqual(_storage.Agents.Count(), count);    // check row count
            Assert.AreEqual(_storage.FindByIdAsync(agent.Id), null);

        }
    }
}